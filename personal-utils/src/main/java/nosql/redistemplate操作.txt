
@see https://blog.csdn.net/linzhiqiang0316/article/details/52711908

下面就来介绍一下Redis中一些常用的操作：

1.存储set值的案例介绍：

Set<String>set1=new HashSet<String>();
set1.add("set1");  
set1.add("set2");  
set1.add("set3");  
redisTemplate.opsForSet().add("set1",set1);  
Set<String> resultSet =redisTemplate.opsForSet().members("set1");  
System.out.println("resultSet:"+resultSet);  
运行结果为：
[html] view plain copy
resultSet:[[set3, set2, set1]]

2.存储map值的案例介绍：

Map<String,String> map=new HashMap<String,String>();  
      map.put("key1","value1");  
      map.put("key2","value2");  
      map.put("key3","value3");  
      map.put("key4","value4");  
      map.put("key5","value5");  
      redisTemplate.opsForHash().putAll("map1",map);  
      Map<String,String> resultMap= redisTemplate.opsForHash().entries("map1");  
      List<String>reslutMapList=redisTemplate.opsForHash().values("map1");  
      Set<String>resultMapSet=redisTemplate.opsForHash().keys("map1");  
      String value=(String)redisTemplate.opsForHash().get("map1","key1");  
      System.out.println("value:"+value);  
      System.out.println("resultMapSet:"+resultMapSet);  
      System.out.println("resultMap:"+resultMap);  
      System.out.println("resulreslutMapListtMap:"+reslutMapList);  
运行结果为：

value:value1  
resultMapSet:[key1, key2, key5, key3, key4]  
resultMap:{key3=value3, key2=value2, key1=value1, key5=value5, key4=value4}  
resulreslutMapListtMap:[value1, value2, value5, value3, value4]  
3.存储list值的案例介绍：

List<String> list1=new ArrayList<String>();  
       list1.add("a1");  
       list1.add("a2");  
       list1.add("a3");  
  
       List<String> list2=new ArrayList<String>();  
       list2.add("b1");  
       list2.add("b2");  
       list2.add("b3");  
       redisTemplate.opsForList().leftPush("listkey1",list1);  
       redisTemplate.opsForList().rightPush("listkey2",list2);  
       List<String> resultList1=(List<String>)redisTemplate.opsForList().leftPop("listkey1");  
       List<String> resultList2=(List<String>)redisTemplate.opsForList().rightPop("listkey2");  
       System.out.println("resultList1:"+resultList1);  
       System.out.println("resultList2:"+resultList2);  
运行结果为：
[html] view plain copy
resultList1:[a1, a2, a3]  
resultList2:[b1, b2, b3]  
这里需要解释一下：不管是leftPush还是rightPush都可以用leftPop或者rightPoP任意一种获取到其中的值，不过就是获取的遍历方向不一样。有学过数据结构的人都知道里面循环链表是可以前后遍历的，就和这里的场景是一样的。如果还有不懂的话可以去看看这部分的源代码，其实就是遍历方向不同，所以效率也不同。所以最好leftPush用leftPoP遍历，rightPush用rightPoP遍历。
4.存储key-value值的案例介绍：


System.out.println("缓存正在设置。。。。。。。。。");  
redisTemplate.opsForValue().set("key1","value1");  
redisTemplate.opsForValue().set("key2","value2");  
redisTemplate.opsForValue().set("key3","value3");  
redisTemplate.opsForValue().set("key4","value4");  
System.out.println("缓存已经设置完毕。。。。。。。");  
String result1=redisTemplate.opsForValue().get("key1").toString();  
String result2=redisTemplate.opsForValue().get("key2").toString();  
String result3=redisTemplate.opsForValue().get("key3").toString();  
System.out.println("缓存结果为：result："+result1+"  "+result2+"   "+result3);  
运行结果为：
[html] view plain copy
缓存正在设置。。。。。。。。。  
缓存已经设置完毕。。。。。。。  
缓存结果为：result：value1  value2   value3

4.存储实体类的案例介绍：

List<Blacklist> blackList=blacklistDao.findAll();  
redisTemplate.opsForValue().set("blacklist",blackList);  
List<Blacklist> resultBlackList= redisTemplate.opsForValue().get("blacklist");  
for(Blacklist blacklist:resultBlackList){  
    System.out.println("ip:"+blacklist.getIp());  
}  
实体类：


package example.entity;  
import javax.persistence.*;  
import java.io.Serializable;  
import java.util.Date;  
@Entity  
@Table(name = "blacklist")  
public class Blacklist implements Serializable  
{  
    private static final long serialVersionUID = -1L;  
    @Id  
    @GeneratedValue(strategy = GenerationType.AUTO)  
    private int id;  
  
    @Column(name = "ip", nullable = true, length = 30)  
    private String ip;  
  
    @Temporal(TemporalType.TIMESTAMP)  
    private Date iptime; // 日期类型，格式：yyyy-MM-dd HH:mm:ss  
  
    public Blacklist() {  
    }  
  
    public Blacklist(String ip, Date iptime) {  
        this.ip = ip;  
        this.iptime = iptime;  
    }  
  
    public static long getSerialVersionUID() {  
        return serialVersionUID;  
    }  
  
    public int getId() {  
        return id;  
    }  
  
    public void setId(int id) {  
        this.id = id;  
    }  
  
    public String getIp() {  
        return ip;  
    }  
  
    public void setIp(String ip) {  
        this.ip = ip;  
    }  
  
    public Date getIptime() {  
        return iptime;  
    }  
  
    public void setIptime(Date iptime) {  
        this.iptime = iptime;  
    }  
}  
运行结果为：
[html] view plain copy
ip:127.0.0.2  
ip:127.0.0.3  
ip:127.0.0.4  
ip:127.0.0.5  
ip:127.0.0.10  
ip:127.0.0.1  

这里需要注意的是：实体类一定要实现序列话，否者不管set的值为多少，最后存储的结果都是null的。
这样关于Redis一些常用的存储方法就介绍完了，下一节将会给大家介绍一下Redis如何实现数据库的同步。

其实也就是实现查询和更新分离，查询的时查询Redis缓存中的数据，更新操作的时候执行数据库操作，然后同步更新Redis中的相关键值。
明天就国庆了，我在这里提前祝大家国庆快乐呀！我会在国庆后更新博客内容，谢谢大家的观看阅读！


